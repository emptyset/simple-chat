// Code generated by mockery v1.0.0
package mocks

import mock "github.com/stretchr/testify/mock"
import storage "github.com/emptyset/simple-chat/internal/storage"

// DataStore is an autogenerated mock type for the DataStore type
type DataStore struct {
	mock.Mock
}

// CreateMessage provides a mock function with given fields: senderId, recipientId, content, mediaType, metadata
func (_m *DataStore) CreateMessage(senderId int, recipientId int, content string, mediaType string, metadata map[string]string) (storage.Record, error) {
	ret := _m.Called(senderId, recipientId, content, mediaType, metadata)

	var r0 storage.Record
	if rf, ok := ret.Get(0).(func(int, int, string, string, map[string]string) storage.Record); ok {
		r0 = rf(senderId, recipientId, content, mediaType, metadata)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.Record)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, string, string, map[string]string) error); ok {
		r1 = rf(senderId, recipientId, content, mediaType, metadata)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: username, hash
func (_m *DataStore) CreateUser(username string, hash []byte) (storage.Record, error) {
	ret := _m.Called(username, hash)

	var r0 storage.Record
	if rf, ok := ret.Get(0).(func(string, []byte) storage.Record); ok {
		r0 = rf(username, hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.Record)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []byte) error); ok {
		r1 = rf(username, hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadMessages provides a mock function with given fields: senderId, recipientId, count, offset
func (_m *DataStore) ReadMessages(senderId int, recipientId int, count int, offset int) ([]storage.Record, error) {
	ret := _m.Called(senderId, recipientId, count, offset)

	var r0 []storage.Record
	if rf, ok := ret.Get(0).(func(int, int, int, int) []storage.Record); ok {
		r0 = rf(senderId, recipientId, count, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]storage.Record)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, int, int) error); ok {
		r1 = rf(senderId, recipientId, count, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
